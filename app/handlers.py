from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import app.keyboard as kb
from app.transactions import TransactionManager
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, ConfigurationError
import logging

router = Router()

def setup_mongo():
    try:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MongoDB
        mongo_url = 'YOUR_MONGO_URI'
        client = MongoClient(mongo_url)
        db = client['data']  # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return db
    except (ConnectionFailure, ConfigurationError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
        return None

db = setup_mongo()
if db is None:
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

class TransferStates(StatesGroup):
    waiting_for_recipient_id = State()
    waiting_for_transfer_amount = State()

async def start_handler(message: Message, db):
    user_id = message.from_user.id
    username = message.from_user.username
    user_data = {
        "userid": user_id,
        "balance": 0,
        "referals": 0,
        "status": "user",
        "username": username if username else None
    }

    collection = db['userdata']
    existing_user = collection.find_one({"userid": user_id})
    if not existing_user:
        collection.insert_one(user_data)
        transaction_manager = TransactionManager(db)
        transaction_manager.initialize_stats(user_id)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=kb.main)
    else:
        transaction_manager = TransactionManager(db)
        transaction_manager.initialize_stats(user_id)
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=kb.main)

@router.message(Command('zighalal1488mednibichok'))
async def cmd_zighalal(message: Message):
    await message.reply('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø–æ—Å—Ö–∞–ª–∫–æ 14/88')

@router.message(F.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message):
    user_id = message.from_user.id
    transaction_manager = TransactionManager(db)
    user = transaction_manager.get_user(user_id)

    if user:
        profile_text = (f"<b>üí∏ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
                        f"ü™Å –í–∞—à–µ –∏–º—è: {user.get('username', 'N/A')}\n"
                        f"üèÆ –í–∞—à ID: {user['userid']}\n"
                        f"üîÆ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']}")
        await message.reply(profile_text, reply_markup=kb.profile, parse_mode='HTML')
    else:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")

@router.callback_query(F.data == 'profilestats')
async def profilestats(callback: CallbackQuery):
    user_id = callback.from_user.id
    transaction_manager = TransactionManager(db)
    stats = transaction_manager.get_stats(user_id)

    if stats:
        stats_text = (f"<b>üéÄ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                      f"–î–æ—Ö–æ–¥—ã: {stats['income']}\n"
                      f"–†–∞—Å—Ö–æ–¥—ã: {stats['expenses']}\n"
                      f"–ü—Ä–æ—Ñ–∏—Ç: {stats['profit']}")
        await callback.message.answer(stats_text, parse_mode='HTML')
    else:
        await callback.message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@router.message(F.text == 'üß∂ –û–ø–µ—Ä–∞—Ü–∏–∏')
async def operations(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:", reply_markup=kb.trans)

@router.callback_query(F.data == 'trans')
async def handle_trans(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await state.set_state(TransferStates.waiting_for_recipient_id)
    await callback.answer()

@router.message(TransferStates.waiting_for_recipient_id, F.text.regexp(r'^\d+$'))
async def get_recipient_id(message: Message, state: FSMContext):
    recipient_id = int(message.text)
    await state.update_data(recipient_id=recipient_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:")
    await state.set_state(TransferStates.waiting_for_transfer_amount)

@router.message(TransferStates.waiting_for_transfer_amount, F.text.regexp(r'^\d+(\.\d{1,2})?$'))
async def get_transfer_amount(message: Message, state: FSMContext):
    transfer_amount = float(message.text)
    sender_id = message.from_user.id
    data = await state.get_data()
    recipient_id = data['recipient_id']

    transaction_manager = TransactionManager(db)
    result_message, success = transaction_manager.handle_transaction(sender_id, recipient_id, transfer_amount)

    await message.answer(result_message)
    if success:
        await message.bot.send_message(recipient_id, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç {sender_id}. –°—É–º–º–∞: {transfer_amount}. –í–∞—à –±–∞–ª–∞–Ω—Å: {transaction_manager.get_user(recipient_id)['balance']}")
    await state.clear()
